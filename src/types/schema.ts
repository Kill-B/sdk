/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/login": {
    /**
     * Generate an access token
     * @description Guide for the Auth can be found in [Auths](https://killbapi.stoplight.io/docs/killb-v2/92fb466bf5e4b). This endpoint is throttled to 20 requests per 10 minutes
     */
    post: operations["AuthController_login"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options0"];
  };
  "/customers/balances": {
    /** Get customer balances */
    get: operations["CustomerController_getBalances"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options1"];
  };
  "/accounts": {
    /** Get Accounts */
    get: operations["AccountController_queryAccount"];
    /** Create Account */
    post: operations["AccountController_create"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options2"];
  };
  "/accounts/{id}": {
    /** Get Account by id */
    get: operations["AccountController_getOne"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options3"];
    /** Update Account */
    patch: operations["AccountController_update"];
  };
  "/accounts/userId/{userId}": {
    /** Get Accounts by UserId */
    get: operations["AccountController_getByUserId"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options4"];
  };
  "/webhooks": {
    /**
     * Get webhook config
     * @description Endpoint responsible for return a webhook config configured. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)
     */
    get: operations["WebhookController_get"];
    /**
     * Create a webhook config.
     * @description Create a webhook config. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)
     */
    post: operations["WebhookController_create"];
    /**
     * Delete webhook config
     * @description Endpoint responsible for REMOVE the webhook config. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)
     */
    delete: operations["WebhookController_delete"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options5"];
    /**
     * Update webhook config
     * @description Endpoint responsible for UPDATE webhook config. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)
     */
    patch: operations["WebhookController_update"];
  };
  "/users": {
    /** Get users */
    get: operations["UserController_get"];
    /** Create a user */
    post: operations["UserController_create"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options6"];
  };
  "/users/{id}": {
    /** Get users */
    get: operations["UserController_getById"];
    /** Delete user */
    delete: operations["UserController_delete"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options7"];
    /** Update user */
    patch: operations["UserController_update"];
  };
  "/users/person/document": {
    /** Add person user document */
    post: operations["UserController_uploadDocumentPerson"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options8"];
  };
  "/users/company/document": {
    /** Add company user document */
    post: operations["UserController_uploadDocumentBusiness"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options9"];
  };
  "/savings": {
    /** Create savings account */
    post: operations["SavingsController_onboard"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options10"];
  };
  "/savings/transactions": {
    /** Get transactions */
    get: operations["SavingsController_getTransactions"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options11"];
  };
  "/savings/{id}": {
    /** Get savings account */
    get: operations["SavingsController_getOnboard"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options12"];
  };
  "/savings/withdrawal": {
    /** Create withdrawal */
    post: operations["SavingsController_withdrawal"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options13"];
  };
  "/savings/{id}/balance": {
    /** Get balance */
    get: operations["SavingsController_getBalance"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options14"];
  };
  "/savings/{id}/deposit-instructions/{type}": {
    /** Get banking deposit instructions */
    get: operations["SavingsController_getDepositInstructions"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options15"];
  };
  "/savings/{id}/crypto-deposit-instructions": {
    /** Get crypto deposit instructions */
    get: operations["SavingsController_getWalletAddress"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options16"];
  };
  "/quotations": {
    /**
     * Create Quotation
     * @description Endpoint responsible for create Quotation.
     */
    post: operations["QuotationController_create"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options17"];
  };
  "/quotations/simulation": {
    /** Simulate a Quotation */
    post: operations["QuotationController_simulation"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options18"];
  };
  "/quotations/{id}": {
    /**
     * Get Quotation
     * @description Endpoint responsible for get Quotation.
     */
    get: operations["QuotationController_getById"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options19"];
  };
  "/ramps": {
    /**
     * Get Ramps
     * @description This endpoint is responsible for getting the result of the Ramp. For more details about this endpoint, see here [Ramps](/docs/Ramps.md)
     */
    get: operations["RampsController_preFundReport"];
    /**
     * Create Ramps
     * @description This endpoint is responsible for executing the Ramp (On or/and Off). For more details about this endpoint, see here [Ramps](/docs/Ramps.md)
     */
    post: operations["RampsController_create"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options20"];
  };
  "/ramps/{id}": {
    /**
     * Get ramp status history
     * @description This endpoint is responsible for getting the result of the Ramp. For more details about this endpoint, see here [Ramps](/docs/Ramps.md)
     */
    get: operations["RampsController_getStatusHistoryById"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options21"];
  };
  "/banks": {
    /** Get Bank list by countryCode */
    get: operations["BankController_get"];
    /**
     * Options
     * @description Options method
     */
    options: operations["options22"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    LoginDto: {
      email: string;
      password: string;
    };
    LoginResponseDto: {
      accessToken: string;
      expiresIn: number;
    };
    BadRequestArgument: {
      /** @example email */
      key: string;
      /** @example invalid@email.com */
      value: string;
    };
    BadRequestResponse: {
      /** @example API_USER.0001 */
      errorCode: string;
      arguments: components["schemas"]["BadRequestArgument"][];
      /**
       * @example [
       *   "User not found",
       *   "Account not found"
       * ]
       */
      message: unknown[][];
      /** @example 400 */
      statusCode: string;
    };
    InternalServerErrorResponse: {
      /** @example 500 */
      statusCode: string;
      /**
       * @example [
       *   "Internal server error"
       * ]
       */
      message: unknown[][];
    };
    GetBalancesResponseDto: {
      id: string;
      customerId: string;
      accountId: string;
      currency: string;
      amount: string;
      active: boolean;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CompanyUserDocumentDto: {
      /**
       * @example NIT
       * @enum {string}
       */
      type: "NIT" | "EIN" | "CNPJ";
      /** @example 123456 */
      number: string;
      /** @example CO */
      issuedCountryCode: string;
    };
    PersonUserDocumentDto: {
      /**
       * @example PASSPORT
       * @enum {string}
       */
      type: "PASSPORT" | "DRIVER_LICENSE" | "NUIP" | "RFC" | "SSN" | "CURP" | "CPF" | "INE" | "IFE";
      /** @example GE04292393 */
      number: string;
      /** @example CO */
      issuedCountryCode: string;
      /** @example 1992-01-01 */
      expeditionDate?: string;
      /**
       * @description Required if document type is INE
       * @example 1111111111
       */
      cic?: string;
      /** @description Required if document type is INE */
      identificadorCiudadano?: string;
      /**
       * @description Required if document type is IFE
       * @example 1111111111
       */
      ocr?: string;
      /** @description Required if document type is IFE */
      numeroEmision?: string;
    };
    PSEAccountDto: {
      /** @description Required if companyName is not present */
      firstName: string;
      middleName?: string;
      /** @description Required if companyName is not present */
      lastName: string;
      /** @description Required if firstName is not present */
      companyName: string;
      email: string;
      phone: string;
      accountNumber: string;
      /** @description You can find the code on the bank list endpoint */
      bankCode: string;
      /** @enum {string} */
      type: "savings" | "checking";
      countryCode: string;
      document: components["schemas"]["CompanyUserDocumentDto"] | components["schemas"]["PersonUserDocumentDto"];
    };
    SpeiAccountDto: {
      /** @description Required if companyName is not present */
      firstName: string;
      middleName: string;
      /** @description Required if companyName is not present */
      lastName: string;
      /** @description Required if firstName is not present */
      companyName: string;
      phone: string;
      email: string;
      document: components["schemas"]["CompanyUserDocumentDto"] | components["schemas"]["PersonUserDocumentDto"];
      clabe: string;
      /**
       * @description ClabeType is necessary only for clabes with format PHONE_NUMBER, CREDIT_CARD
       * @enum {string}
       */
      clabeType?: "CLABE" | "CREDIT_CARD" | "PHONE_NUMBER";
      /** @description You can find the code on the bank list endpoint. BankCode is required only for the following clabe types: PHONE_NUMBER, CREDIT_CARD */
      bankCode?: string;
      countryCode: string;
    };
    WalletAccountDto: {
      /** @description Required if companyName is not present */
      firstName: string;
      middleName: string;
      /** @description Required if companyName is not present */
      lastName: string;
      /** @description Required if firstName is not present */
      companyName: string;
      phone: string;
      email: string;
      document: components["schemas"]["CompanyUserDocumentDto"] | components["schemas"]["PersonUserDocumentDto"];
      currency: string;
      network: string;
      address: string;
    };
    AccountAddressDto: {
      street1: string;
      street2: string;
      zipCode: string;
      city: string;
      stateCode: string;
      countryCode: string;
    };
    ACHAccountDto: {
      /** @description Required if companyName is not present */
      firstName: string;
      middleName: string;
      /** @description Required if companyName is not present */
      lastName: string;
      /** @description Required if firstName is not present */
      companyName: string;
      bankName: string;
      routingNumber: string;
      accountNumber: string;
      type: string;
      address: components["schemas"]["AccountAddressDto"];
      document: components["schemas"]["CompanyUserDocumentDto"] | components["schemas"]["PersonUserDocumentDto"];
    };
    WIREAccountDto: {
      /** @description Required if companyName is not present */
      firstName: string;
      middleName: string;
      /** @description Required if companyName is not present */
      lastName: string;
      /** @description Required if firstName is not present */
      companyName: string;
      accountNumber: string;
      routingNumber: string;
      address: components["schemas"]["AccountAddressDto"];
      bankName: string;
      bankAddress: components["schemas"]["AccountAddressDto"];
      document: components["schemas"]["CompanyUserDocumentDto"] | components["schemas"]["PersonUserDocumentDto"];
    };
    CreateAccountDto: {
      /** @enum {string} */
      type: "PSE" | "ACH" | "WIRE" | "WALLET" | "COELSA" | "SPEI" | "CUSTODIAL";
      userId: string;
      data: components["schemas"]["PSEAccountDto"] | components["schemas"]["SpeiAccountDto"] | components["schemas"]["WalletAccountDto"] | components["schemas"]["WIREAccountDto"] | components["schemas"]["ACHAccountDto"];
      /** @description A unique identifier used to identify your existing user. */
      externalId: string;
    };
    CreateAccountResponseDto: {
      id: string;
      userId: string;
      type: string;
      status: string;
      data: components["schemas"]["PSEAccountDto"] | components["schemas"]["SpeiAccountDto"] | components["schemas"]["WalletAccountDto"];
      /** @description A unique identifier used to identify your existing user. */
      externalId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    PSEUpdateAccountDto: {
      accountNumber: string;
      bankCode: string;
      type: string;
      document?: components["schemas"]["CompanyUserDocumentDto"] | components["schemas"]["PersonUserDocumentDto"];
    };
    SPEIUpdateAccountDto: {
      document?: components["schemas"]["CompanyUserDocumentDto"] | components["schemas"]["PersonUserDocumentDto"];
      clabe: string;
      clabeType: string;
    };
    WALLETUpdateAccountDto: {
      document?: components["schemas"]["CompanyUserDocumentDto"] | components["schemas"]["PersonUserDocumentDto"];
      currency: string;
      network: string;
      address: string;
    };
    UpdateAccountDto: {
      type: string;
      data: components["schemas"]["PSEUpdateAccountDto"] | components["schemas"]["SPEIUpdateAccountDto"] | components["schemas"]["WALLETUpdateAccountDto"];
    };
    UpdateAccountResponseDto: {
      id: string;
      userId: string;
      type: string;
      status: string;
      data: components["schemas"]["PSEAccountDto"] | components["schemas"]["SpeiAccountDto"] | components["schemas"]["WalletAccountDto"];
      /** @description A unique identifier used to identify your existing user. */
      externalId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    QueryAccountDataResponseDto: {
      id: string;
      userId: string;
      type: string;
      status: string;
      data: components["schemas"]["PSEAccountDto"] | components["schemas"]["SpeiAccountDto"] | components["schemas"]["WalletAccountDto"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    QueryAccountResponseDto: {
      totalPage: number;
      accounts: components["schemas"]["QueryAccountDataResponseDto"][];
    };
    CreateWebhookDto: {
      /** @example https://mywebhook.com */
      url: string;
      /** @example GJD6cyf6xbc@bvx6rvu */
      secret: string;
      events: ("RAMP" | "USER" | "TRANSACTION" | "ACCOUNT" | "CUSTODIAL_ACCOUNT")[];
    };
    CreateWebhookResponseDto: {
      /** @example 4d23aa52-1b40-4584-a8ea-58aba6099c5c */
      id: string;
      /** @example 8ffce092-b97a-48bd-9efa-24c66ac7fe13 */
      customerId: string;
      /** @example https://mywebhook.com */
      url: string;
      events: ("RAMP" | "USER" | "TRANSACTION" | "ACCOUNT" | "CUSTODIAL_ACCOUNT")[];
      /** @example true */
      active: boolean;
      /**
       * Format: date-time
       * @example 2024-02-06T00:03:30.791Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @example 2024-02-06T00:03:30.791Z
       */
      updatedAt: string;
    };
    UpdateWebhookDto: {
      /** @example https://mywebhook.com */
      url: string;
      active: boolean;
      /** @example GJD6cyf6xbc@bvx6rvu */
      secret: string;
      events: ("RAMP" | "USER" | "TRANSACTION" | "ACCOUNT" | "CUSTODIAL_ACCOUNT")[];
    };
    UpdateWebhookResponseDto: {
      /** @example 4d23aa52-1b40-4584-a8ea-58aba6099c5c */
      id: string;
      /** @example 8ffce092-b97a-48bd-9efa-24c66ac7fe13 */
      customerId: string;
      /** @example https://mywebhook.com */
      url: string;
      events: ("RAMP" | "USER" | "TRANSACTION" | "ACCOUNT" | "CUSTODIAL_ACCOUNT")[];
      /** @example true */
      active: boolean;
      /**
       * Format: date-time
       * @example 2024-02-06T00:03:30.791Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @example 2024-02-06T00:03:30.791Z
       */
      updatedAt: string;
    };
    GetWebhookResponseDto: {
      /** @example 4d23aa52-1b40-4584-a8ea-58aba6099c5c */
      id: string;
      /** @example 8ffce092-b97a-48bd-9efa-24c66ac7fe13 */
      customerId: string;
      /** @example https://mywebhook.com */
      url: string;
      events: ("RAMP" | "USER" | "TRANSACTION" | "ACCOUNT" | "CUSTODIAL_ACCOUNT")[];
      /** @example true */
      active: boolean;
      /**
       * Format: date-time
       * @example 2024-02-06T00:03:30.791Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @example 2024-02-06T00:03:30.791Z
       */
      updatedAt: string;
    };
    WebhookEvent: Record<string, never>;
    UserAddressDto: {
      /** @example 68528 Dwight Court */
      street1: string;
      /** @example Apt 488 */
      street2?: string;
      /** @example Fiorenze */
      city: string;
      /** @example New York */
      state: string;
      /** @example 48245000 */
      zipCode: string;
      /** @example CO */
      countryCode: string;
    };
    InvestmentProfile: {
      /**
       * @example EMPLOYMENT
       * @enum {string}
       */
      primarySourceOfFunds: "EMPLOYMENT" | "SAVINGS" | "WINNINGS" | "MARITAL" | "REAL_ESTATE" | "TRUST" | "INVESTMENT" | "OTHER" | "COMPANY" | "COMPANY_CAPITAL" | "LOAN" | "PRIVATE_CAPITAL" | "GRANT";
      /** @example I work at Google */
      primarySourceOfFundsDescription: string;
      /**
       * @example UPTO_10K
       * @enum {string}
       */
      totalAssets: "UPTO_10K" | "TEN_TO_100K" | "ONEHUNDREDK_TO_1M" | "ONE_TO_10M" | "TEN_TO_50M" | "FIFTY_TO_250M" | "MORE_THAN_250M";
      /**
       * @example UPTO_10K
       * @enum {string}
       */
      usdValueOfFiat: "UPTO_10K" | "TEN_TO_100K" | "ONEHUNDREDK_TO_1M" | "ONE_TO_10M" | "TEN_TO_50M" | "FIFTY_TO_250M" | "MORE_THAN_250M";
      /**
       * @example UPTO_5
       * @enum {string}
       */
      monthlyDeposits: "UPTO_5" | "FIVE_TO_10" | "TEN_TO_25" | "MORE_THAN_25";
      /**
       * @example UPTO_5
       * @enum {string}
       */
      monthlyWithdrawals: "UPTO_5" | "FIVE_TO_10" | "TEN_TO_25" | "MORE_THAN_25";
      /**
       * @example UPTO_1K
       * @enum {string}
       */
      monthlyInvestmentDeposit: "UPTO_1K" | "ONE_TO_100K" | "ONEHUNDREDK_TO_1M" | "MILLION_TO_5M" | "MORE_THAN_5M";
      /**
       * @example UPTO_1K
       * @enum {string}
       */
      monthlyInvestmentWithdrawal: "UPTO_1K" | "ONE_TO_100K" | "ONEHUNDREDK_TO_1M" | "MILLION_TO_5M" | "MORE_THAN_5M";
      /**
       * @example UPTO_1K
       * @enum {string}
       */
      usdValueOfCrypto: "UPTO_1K" | "ONE_TO_100K" | "ONEHUNDREDK_TO_1M" | "MILLION_TO_5M" | "MORE_THAN_5M";
      /**
       * @example UPTO_5
       * @enum {string}
       */
      monthlyCryptoDeposits: "UPTO_5" | "FIVE_TO_10" | "TEN_TO_25" | "MORE_THAN_25";
      /**
       * @example UPTO_5
       * @enum {string}
       */
      monthlyCryptoWithdrawals: "UPTO_5" | "FIVE_TO_10" | "TEN_TO_25" | "MORE_THAN_25";
      /**
       * @example UPTO_1K
       * @enum {string}
       */
      monthlyCryptoInvestmentDeposit: "UPTO_1K" | "ONE_TO_100K" | "ONEHUNDREDK_TO_1M" | "MILLION_TO_5M" | "MORE_THAN_5M";
      /**
       * @example UPTO_1K
       * @enum {string}
       */
      monthlyCryptoInvestmentWithdrawal: "UPTO_1K" | "ONE_TO_100K" | "ONEHUNDREDK_TO_1M" | "MILLION_TO_5M" | "MORE_THAN_5M";
    };
    KycProfile: {
      fundsSendReceiveJurisdictions: unknown[][];
      /** @example NONE */
      engageInActivities: ("NONE" | "ADULT_ENTERTAINMENT" | "DRUGS" | "FIREARMS" | "GAMBLING" | "MARIJUANA" | "TUMBLING")[];
    };
    CreatePersonUserDto: {
      /** @example John */
      firstName: string;
      /** @example Carlos */
      middleName?: string;
      /** @example Francisco */
      lastName: string;
      /** @example 1992-01-01 */
      dateOfBirth: string;
      /** @example example@test.com */
      email: string;
      /** @example +576015555555 */
      phone: string;
      address: components["schemas"]["UserAddressDto"];
      document: components["schemas"]["PersonUserDocumentDto"];
      /** @example CO */
      nationality?: string;
      /** @example CO */
      citizenship?: string;
      /**
       * @example EMPLOYEE
       * @enum {string}
       */
      employmentStatus?: "EMPLOYEE" | "SELF_EMPLOYED" | "RETIRED" | "UNEMPLOYED" | "OTHER";
      /** @example Software Engineer */
      employmentDescription?: string;
      /** @example Google */
      employerName?: string;
      /** @example Software Engineer */
      occupation?: string;
      investmentProfile?: components["schemas"]["InvestmentProfile"];
      kycProfile?: components["schemas"]["KycProfile"];
    };
    CompanyKycProfile: {
      fundsSendReceiveJurisdictions: unknown[][];
      /** @example NONE */
      engageInActivities: ("NONE" | "ADULT_ENTERTAINMENT" | "DRUGS" | "FIREARMS" | "GAMBLING" | "MARIJUANA" | "TUMBLING")[];
      /**
       * @example NONE
       * @enum {string}
       */
      regulatedStatus: "REGULATED" | "REGISTERED" | "LICENSED" | "NONE" | "NOT_REQUIRED";
      /** @example Electronic sales */
      descriptionOfBusinessNature: string;
    };
    CreateCompanyUserDto: {
      /** @example Gerlach, Baumbach and Bernhard */
      companyName: string;
      /** @example Babbleopia */
      tradeName?: string;
      /** @example 123456 */
      registeredNumber?: string;
      /** @enum {string} */
      legalStructure?: "C_CORP_PRIVATE" | "C_CORP_PUBLIC" | "HNWI" | "LLC" | "LLP" | "LP" | "S_CORP" | "SOLE_PROP" | "TRUST" | "NON_PROFIT" | "OTHER";
      description?: string;
      establishedOn?: string;
      phone?: string;
      email?: string;
      address: components["schemas"]["UserAddressDto"];
      mainOwnerUser: string;
      ownerUsers?: string[];
      naics?: string;
      naicsDescription?: string;
      document: components["schemas"]["CompanyUserDocumentDto"];
      investmentProfile?: components["schemas"]["InvestmentProfile"];
      kycProfile?: components["schemas"]["CompanyKycProfile"];
    };
    CreateUserDto: {
      /**
       * @example PERSON
       * @enum {string}
       */
      type: "PERSON" | "COMPANY";
      data: components["schemas"]["CreatePersonUserDto"] | components["schemas"]["CreateCompanyUserDto"];
      /**
       * @description A unique identifier used to identify your existing user.
       * @example d00e4f43-2022-42f3-ba1c-dcf4c1dcd934
       */
      externalId?: string;
    };
    PersonUserDto: {
      /** @example John */
      firstName: string;
      /** @example Carlos */
      middleName?: string;
      /** @example Francisco */
      lastName: string;
      /** @example 1992-01-01 */
      dateOfBirth: string;
      /** @example example@test.com */
      email: string;
      /** @example +576015555555 */
      phone: string;
      address: components["schemas"]["UserAddressDto"];
      document: components["schemas"]["PersonUserDocumentDto"];
      /** @example CO */
      nationality?: string;
      /** @example CO */
      citizenship?: string;
      /**
       * @example EMPLOYEE
       * @enum {string}
       */
      employmentStatus?: "EMPLOYEE" | "SELF_EMPLOYED" | "RETIRED" | "UNEMPLOYED" | "OTHER";
      /** @example Software Engineer */
      employmentDescription?: string;
      /** @example Google */
      employerName?: string;
      /** @example Software Engineer */
      occupation?: string;
      investmentProfile?: components["schemas"]["InvestmentProfile"];
      kycProfile?: components["schemas"]["KycProfile"];
    };
    CompanyUserDto: {
      /** @example Gerlach, Baumbach and Bernhard */
      companyName: string;
      /** @example Babbleopia */
      tradeName?: string;
      /** @example 123456 */
      registeredNumber?: string;
      /** @enum {string} */
      legalStructure?: "C_CORP_PRIVATE" | "C_CORP_PUBLIC" | "HNWI" | "LLC" | "LLP" | "LP" | "S_CORP" | "SOLE_PROP" | "TRUST" | "NON_PROFIT" | "OTHER";
      description?: string;
      establishedOn?: string;
      phone?: string;
      email?: string;
      address: components["schemas"]["UserAddressDto"];
      mainOwnerUser: string;
      ownerUsers?: string[];
      naics?: string;
      naicsDescription?: string;
      document: components["schemas"]["CompanyUserDocumentDto"];
      investmentProfile?: components["schemas"]["InvestmentProfile"];
      kycProfile?: components["schemas"]["CompanyKycProfile"];
    };
    CreateUserResponseDto: {
      /** @example 4d23aa52-1b40-4584-a8ea-58aba6099c5c */
      id: string;
      /** @example 8ffce092-b97a-48bd-9efa-24c66ac7fe13 */
      customerId: string;
      /**
       * @example PERSON
       * @enum {string}
       */
      type: "PERSON" | "COMPANY";
      data: components["schemas"]["PersonUserDto"] | components["schemas"]["CompanyUserDto"];
      /**
       * @description A unique identifier used to identify your existing user.
       * @example d00e4f43-2022-42f3-ba1c-dcf4c1dcd934
       */
      externalId?: string;
      /**
       * @example L0
       * @enum {string}
       */
      accessLevel: "L0" | "L1" | "L2" | "L3" | "L4";
      /** @example true */
      active: boolean;
      /**
       * Format: date-time
       * @example 2024-02-06T00:03:30.791Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @example 2024-02-06T00:03:30.791Z
       */
      updatedAt: string;
    };
    GetUserQueryResponse: {
      users: components["schemas"]["CreateUserResponseDto"][];
      /** @example 1 */
      totalPage: number;
    };
    UploadPersonDocumentDto: {
      /** Format: uuid */
      userId: string;
      /**
       * @example CURP
       * @enum {string}
       */
      documentType: "PROVE_OF_ADDRESS_BANK_STATEMENT" | "PROVE_OF_ADDRESS_UTILITY_BILL" | "PROVE_OF_ADDRESS_LEASE_AGREEMENT" | "SOURCE_OF_FUNDS_BANK_STATEMENT" | "SOURCE_OF_FUNDS_PAYSLIP" | "PASSPORT" | "DRIVER_LICENSE" | "NUIP" | "RFC" | "SSN" | "CURP" | "CPF" | "INE" | "IFE";
      /**
       * Format: binary
       * @description Front document file
       */
      frontDocument: string;
      /**
       * Format: binary
       * @description Back document file
       */
      backDocument?: string;
    };
    UploadBusinessDocumentDto: {
      /** Format: uuid */
      userId: string;
      /**
       * @example NIT
       * @enum {string}
       */
      documentType: "PROVE_OF_ADDRESS_BANK_STATEMENT" | "PROVE_OF_ADDRESS_UTILITY_BILL" | "PROVE_OF_ADDRESS_LEASE_AGREEMENT" | "SOURCE_OF_FUNDS_BANK_STATEMENT" | "SOURCE_OF_FUNDS_PAYSLIP" | "PROOF_OF_COMPANY_FORMATION" | "ARTICLES_OF_INCORPORATION" | "INCORPORATION_DOCUMENTS" | "NIT" | "OTHER";
      /**
       * Format: binary
       * @description Front document file
       */
      frontDocument: string;
      /**
       * Format: binary
       * @description Back document file
       */
      backDocument?: string;
    };
    ILevelUpdateInput: Record<string, never>;
    ILevelDowngradeInput: Record<string, never>;
    SavingsCustodialAccountDto: {
      /** Format: UUID */
      userId: string;
      /** @description Accept terms and conditions */
      acceptedTermsAndConditions: boolean;
    };
    SavingsAccountResponseDto: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      userId: string;
      /** @enum {string} */
      status: "PENDING" | "COMPLETED" | "REJECTED";
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    TransactionsDataReturn: {
      /** @example 4d23aa52-1b40-4584-a8ea-58aba6099c5c */
      id: string;
      /** @example 8ffce092-b97a-48bd-9efa-24c66ac7fe13 */
      customerId: string;
      /** @example 9d23aa10-1b40-4584-a8ea-58aba6099c5c */
      userId: string;
      /** @example 2e200eb1-d89e-40a3-bb74-45ce3ba61e95 */
      originAccountId: string;
      /** @example f09c5ef6-c15c-4de5-b2dd-1a44d062dc7f */
      destinationAccountId: string;
      /** @example 322.1 */
      amount: string;
      /**
       * @example DEPOSIT
       * @enum {string}
       */
      type: "DEPOSIT" | "WITHDRAWAL";
      /** @example USD */
      currency: string;
      /**
       * Format: date-time
       * @example 2024-02-06T00:03:30.791Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @example 2024-02-06T00:03:30.791Z
       */
      updatedAt: string;
    };
    getTransactionsReturn: {
      transactions: components["schemas"]["TransactionsDataReturn"][];
      /** @example 1 */
      totalPage: number;
    };
    SourceDataDto: {
      savingsAccountId: string;
    };
    DestinationDataDto: {
      savingsAccountId: string;
      externalAccountId: string;
    };
    CreateWithdrawalDto: {
      source: components["schemas"]["SourceDataDto"];
      destination: components["schemas"]["DestinationDataDto"];
      amount: number;
      comment: string;
    };
    Source: {
      currency: string;
      custodialAccountId: string;
    };
    Destination: {
      currency: string;
      externalAccountId: string;
    };
    WithdrawalSavingsReturn: {
      /** Format: uuid */
      id: string;
      /** @enum {string} */
      status: "CREATED" | "PENDING" | "PROCESSING" | "CONFIRMED" | "REFUNDED" | "COMPLETED" | "CANCELED" | "EXPIRED" | "FAILED" | "ERROR" | "REJECTED";
      amount: number;
      /** Format: uuid */
      userId: string;
      /** @enum {string} */
      type: "DEPOSIT" | "WITHDRAWAL";
      source: components["schemas"]["Source"];
      destination: components["schemas"]["Destination"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    GetBalanceReturn: {
      /** @example USD */
      currency: string;
      amount: number;
    };
    InstitutionAddressDto: {
      /** @example Main Street1 */
      street1: string;
      /** @example New York */
      city: string;
      /** @example NJ */
      state: string;
      /** @example 12345 */
      postalCode: string;
      /** @example US */
      countryCode: string;
    };
    GetDepositInstructionsReturn: {
      /**
       * @example ACH
       * @enum {string}
       */
      type: "ACH" | "WIRE";
      /** @example USD */
      currency?: string;
      /** @example Bank Name */
      accountHolderName: string;
      /** @example 111111111111 */
      accountNumber: string;
      /** @example 222222222 */
      routingNumber: string;
      /** @example A1AABCD */
      memo?: string;
      bankAddress?: components["schemas"]["InstitutionAddressDto"];
      /** @example AABBCC3311DZEF */
      depositMessage?: string;
      /** @example KillB Bank Name */
      bankBeneficiaryName?: string;
    };
    GetCryptoDepositInstructionsReturn: {
      /** @example 0x */
      address: string;
      /** @example POLYGON */
      network: string;
      /** @example USDC */
      currency: string;
    };
    CreateQuotationDto: {
      /** @enum {string} */
      fromCurrency: "MXN" | "COP" | "USDC" | "USDT";
      /** @enum {string} */
      toCurrency: "MXN" | "COP" | "USDC" | "USDT";
      amount: number;
      amountIsToCurrency: boolean;
      /** @enum {string} */
      cashInMethod: "SPEI" | "POLYGON" | "ERC20" | "PSE" | "PRE_FUND";
      /** @enum {string} */
      cashOutMethod: "SPEI" | "POLYGON" | "ERC20" | "PSE";
    };
    CreateQuotationResponseDto: {
      id: string;
      /** @enum {string} */
      fromCurrency: "MXN" | "COP" | "USDC" | "USDT";
      /** @enum {string} */
      toCurrency: "MXN" | "COP" | "USDC" | "USDT";
      fromAmount: number;
      toAmount: number;
      rate: number;
      expiresAt: number;
      /** @enum {string} */
      cashInMethod: "SPEI" | "POLYGON" | "ERC20" | "PSE" | "PRE_FUND";
      /** @enum {string} */
      cashOutMethod: "SPEI" | "POLYGON" | "ERC20" | "PSE";
    };
    SimulateQuotationResponseDto: {
      /** @enum {string} */
      fromCurrency: "MXN" | "COP" | "USDC" | "USDT";
      /** @enum {string} */
      toCurrency: "MXN" | "COP" | "USDC" | "USDT";
      fromAmount: number;
      toAmount: number;
      rate: number;
      /** @enum {string} */
      cashInMethod: "SPEI" | "POLYGON" | "ERC20" | "PSE" | "PRE_FUND";
      /** @enum {string} */
      cashOutMethod: "SPEI" | "POLYGON" | "ERC20" | "PSE";
    };
    RefundInstructions: {
      /** @example POLYGON */
      network: string;
      /** @example Ox */
      address: string;
      /**
       * @example USDC
       * @enum {string}
       */
      asset: "USDC";
      clabe: string;
      /** @example Bruce Wayne */
      beneficiary: string;
    };
    CreateRampInputDto: {
      quotationId: string;
      userId: string;
      accountId: string;
      refundInstructions: components["schemas"]["RefundInstructions"];
    };
    ISPEIPaymentInfo: {
      network: string;
      Bank: string;
      Beneficiary: string;
      CLABE: string;
      /** @description This code needs to be sent for KillB be able to identify the payment */
      concepto: string;
    };
    ICOPPaymentInfo: {
      url: string;
    };
    ICryptoPaymentInfo: {
      network: string;
      address: string;
    };
    CreateRampResponseDto: {
      id: string;
      active: boolean;
      /** @enum {string} */
      fromCurrency: "MXN" | "COP" | "USDC" | "USDT";
      /** @enum {string} */
      toCurrency: "MXN" | "COP" | "USDC" | "USDT";
      fromAmount: number;
      toAmount: number;
      quotationId: string;
      userId: string;
      /** @enum {string} */
      cashInMethod: "SPEI" | "POLYGON" | "ERC20" | "PSE" | "PRE_FUND";
      /** @enum {string} */
      cashOutMethod: "SPEI" | "POLYGON" | "ERC20" | "PSE";
      accountId: string;
      /** @enum {string} */
      status: "CREATED" | "CASH_IN_REQUEST" | "CONVERSION_REQUEST" | "CASH_OUT_REQUEST" | "CASH_IN_REQUESTED" | "CONVERSION_REQUESTED" | "CASH_OUT_REQUESTED" | "CASH_IN_PENDING" | "CONVERSION_PENDING" | "CASH_OUT_PENDING" | "CASH_IN_PROCESSING" | "CONVERSION_PROCESSING" | "CASH_OUT_PROCESSING" | "CASH_IN_COMPLETED" | "CONVERSION_COMPLETED" | "CASH_OUT_COMPLETED" | "COMPLETED" | "CANCELED" | "FAILED" | "REJECTED" | "ERROR";
      isPreFunded?: boolean;
      paymentInfo?: (components["schemas"]["ISPEIPaymentInfo"] | components["schemas"]["ICOPPaymentInfo"] | components["schemas"]["ICryptoPaymentInfo"])[];
      /** @description complement information about a transfer, like: Code error */
      details?: string;
      /** @description Proof of transfer, like: TxHash, url, etc. */
      transferProof?: string;
      /** @enum {string} */
      type: "ON" | "OFF";
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    GetRampQueryResponseDto: {
      ramps: components["schemas"]["CreateRampResponseDto"][];
      totalPage: number;
    };
    GetBanksResponseDto: {
      /** @example 0001 */
      code: string;
      /** @example BANCOMEXT */
      companyName: string;
      /** @example MX */
      countryCode: string;
      /** @example BANCOMEXT */
      tradeName: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      createdAt: string;
      accountTypes: string[];
      /** Format: uuid */
      id: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Generate an access token
   * @description Guide for the Auth can be found in [Auths](https://killbapi.stoplight.io/docs/killb-v2/92fb466bf5e4b). This endpoint is throttled to 20 requests per 10 minutes
   */
  AuthController_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options0: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Get customer balances */
  CustomerController_getBalances: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetBalancesResponseDto"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options1: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Get Accounts */
  AccountController_queryAccount: {
    parameters: {
      query?: {
        /** @example 7f0a8ad6-29a1-4a66-a6c4-8bb398eb78d1 */
        userId?: string;
        type?: "PSE" | "ACH" | "WIRE" | "WALLET" | "COELSA" | "SPEI" | "CUSTODIAL";
        /** @example 001134412 */
        accountNumber?: string;
        /** @example 1231312 */
        routingNumber?: string;
        /** @example 0x */
        address?: string;
        clabe?: string;
        cvu?: string;
        limit?: number;
        page?: number;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["QueryAccountResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /** Create Account */
  AccountController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAccountDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateAccountResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options2: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Get Account by id */
  AccountController_getOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateAccountResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options3: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Update Account */
  AccountController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAccountDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UpdateAccountResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /** Get Accounts by UserId */
  AccountController_getByUserId: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateAccountResponseDto"][];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options4: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get webhook config
   * @description Endpoint responsible for return a webhook config configured. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)
   */
  WebhookController_get: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetWebhookResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Create a webhook config.
   * @description Create a webhook config. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)
   */
  WebhookController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWebhookDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateWebhookResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete webhook config
   * @description Endpoint responsible for REMOVE the webhook config. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)
   */
  WebhookController_delete: {
    responses: {
      200: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options5: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Update webhook config
   * @description Endpoint responsible for UPDATE webhook config. For more information, examples and how works see here: [Webhook Documentation](/docs/Webhooks.md)
   */
  WebhookController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWebhookDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateWebhookResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /** Get users */
  UserController_get: {
    parameters: {
      query: {
        limit?: number;
        page?: number;
        id?: string;
        firstName?: string;
        middleName?: string;
        dateOfBirth?: string;
        /** @description A unique identifier used to identify your existing user. */
        externalId?: string;
        companyName?: string;
        tradeName?: string;
        legalStructure?: string;
        description?: string;
        establishedOn?: string;
        phone?: string;
        email?: string;
        mainOwnerUser?: string;
        ownerUsers?: string[];
        naics?: string;
        naicsDescription?: string;
        customerId?: string;
        /** @example PERSON */
        type: "PERSON" | "COMPANY";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetUserQueryResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /** Create a user */
  UserController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateUserResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options6: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Get users */
  UserController_getById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetUserQueryResponse"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /** Delete user */
  UserController_delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options7: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Update user */
  UserController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePersonUserDto"] | components["schemas"]["CreateCompanyUserDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CreateUserResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /** Add person user document */
  UserController_uploadDocumentPerson: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["UploadPersonDocumentDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options8: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Add company user document */
  UserController_uploadDocumentBusiness: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["UploadBusinessDocumentDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options9: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Create savings account */
  SavingsController_onboard: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SavingsCustodialAccountDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SavingsAccountResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options10: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Get transactions */
  SavingsController_getTransactions: {
    parameters: {
      query?: {
        /** @example 1 */
        limit?: number;
        /** @example 10 */
        page?: number;
        /** @example 70bb2b47-1d79-4071-bfdb-a0b6a18b043b */
        id?: string;
        /** @example 1f3f8ec8-53a6-422b-82af-71bb9c7bd3a0 */
        destinationAccountId?: string;
        /** @example f4f49acb-c413-48b2-99b5-d5de57c34165 */
        originAccountId?: string;
        /** @example 474a6f7c-9b61-417d-ba0c-11cde75d4599 */
        userId?: string;
        /** @example DEPOSIT */
        type?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["getTransactionsReturn"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options11: {
    parameters: {
      query?: {
        /** @example 1 */
        limit?: number;
        /** @example 10 */
        page?: number;
        /** @example 70bb2b47-1d79-4071-bfdb-a0b6a18b043b */
        id?: string;
        /** @example 1f3f8ec8-53a6-422b-82af-71bb9c7bd3a0 */
        destinationAccountId?: string;
        /** @example f4f49acb-c413-48b2-99b5-d5de57c34165 */
        originAccountId?: string;
        /** @example 474a6f7c-9b61-417d-ba0c-11cde75d4599 */
        userId?: string;
        /** @example DEPOSIT */
        type?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Get savings account */
  SavingsController_getOnboard: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SavingsAccountResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options12: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Create withdrawal */
  SavingsController_withdrawal: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWithdrawalDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["WithdrawalSavingsReturn"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options13: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Get balance */
  SavingsController_getBalance: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetBalanceReturn"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options14: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Get banking deposit instructions */
  SavingsController_getDepositInstructions: {
    parameters: {
      path: {
        /** @example 449b31b4-fca5-465e-99ea-7b7b28cfbccb */
        id: string;
        /** @example ACH */
        type: "ACH" | "WIRE";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetDepositInstructionsReturn"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options15: {
    parameters: {
      path: {
        /** @example 449b31b4-fca5-465e-99ea-7b7b28cfbccb */
        id: string;
        /** @example ACH */
        type: "ACH" | "WIRE";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Get crypto deposit instructions */
  SavingsController_getWalletAddress: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["GetCryptoDepositInstructionsReturn"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options16: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Create Quotation
   * @description Endpoint responsible for create Quotation.
   */
  QuotationController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateQuotationDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateQuotationResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options17: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Simulate a Quotation */
  QuotationController_simulation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateQuotationDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SimulateQuotationResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options18: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get Quotation
   * @description Endpoint responsible for get Quotation.
   */
  QuotationController_getById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateQuotationResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options19: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get Ramps
   * @description This endpoint is responsible for getting the result of the Ramp. For more details about this endpoint, see here [Ramps](/docs/Ramps.md)
   */
  RampsController_preFundReport: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        id?: string;
        /** @description A unique identifier used to identify your existing user. */
        externalId?: string;
        status?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetRampQueryResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Ramps
   * @description This endpoint is responsible for executing the Ramp (On or/and Off). For more details about this endpoint, see here [Ramps](/docs/Ramps.md)
   */
  RampsController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRampInputDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateRampResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options20: {
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /**
   * Get ramp status history
   * @description This endpoint is responsible for getting the result of the Ramp. For more details about this endpoint, see here [Ramps](/docs/Ramps.md)
   */
  RampsController_getStatusHistoryById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetRampQueryResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options21: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
  /** Get Bank list by countryCode */
  BankController_get: {
    parameters: {
      query: {
        countryCode: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetBanksResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["InternalServerErrorResponse"];
        };
      };
    };
  };
  /**
   * Options
   * @description Options method
   */
  options22: {
    parameters: {
      query: {
        countryCode: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: never;
      };
    };
  };
}
